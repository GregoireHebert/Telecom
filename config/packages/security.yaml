security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\InMemoryUser: 'auto'
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory:
            memory:
                users:
                    greg:
                        password: '$2y$13$oD8Ak1L0tGtVz7ckAwRaR.sipoi1GmMY3Z.LH6nbEbnBi5M7179fK'
                        roles: 'ROLE_USER'
                    admin:
                        password: '$2y$13$oD8Ak1L0tGtVz7ckAwRaR.sipoi1GmMY3Z.LH6nbEbnBi5M7179fK'
                        roles: 'ROLE_ADMIN'
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users_in_memory
            form_login:
                login_path: login
                check_path: login
                enable_csrf: true
            logout:
                path: /logout
                target: /
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/login, roles: IS_ANONYMOUS }
#         - { path: ^/pendu, roles: ROLE_ADMIN }
         - { path: ^/, roles: ROLE_USER }
